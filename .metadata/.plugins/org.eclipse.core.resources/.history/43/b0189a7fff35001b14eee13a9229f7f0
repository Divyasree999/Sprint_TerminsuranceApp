package com.cg.terminsuranceuser.control;
import com.cg.terminsuranceuser.entity.Customer;
import com.cg.terminsuranceuser.service.UserService;
import com.fasterxml.jackson.core.JsonProcessingException;
import com.fasterxml.jackson.databind.ObjectMapper;
import org.junit.Assert;
import org.junit.jupiter.api.Test;
import org.junit.runner.RunWith;
import org.mockito.Mockito;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.boot.test.autoconfigure.web.servlet.WebMvcTest;
import org.springframework.boot.test.mock.mockito.MockBean;
import org.springframework.http.HttpStatus;
import org.springframework.http.MediaType;
import org.springframework.mock.web.MockHttpServletResponse;
import org.springframework.test.context.junit4.SpringRunner;
import org.springframework.test.web.servlet.MockMvc;
import org.springframework.test.web.servlet.MvcResult;
import org.springframework.test.web.servlet.request.MockMvcRequestBuilders;
import java.util.ArrayList;
import java.util.List;
import static org.assertj.core.api.Assertions.assertThat;
@RunWith(SpringRunner.class)
@WebMvcTest(value = CustomerController.class)
public class CustomerControllerTest {
	@Autowired
    private MockMvc mockMvc;
 @MockBean
    private UserService userService;

 @Test
	public void testCreateUser() throws Exception{
	        String URI = "/api/v2/saveuser";
	        Customer user = new Customer();
	        user.setUserId(10178263);
		    user.setPolicyId(40127382);
		    user.setUserName("Hema");
	        user.setEmail("hema26@gmail.com");
	        user.setMobileNo("7845326170");
	        user.setAge(27);
	        user.setDob("16-07-1993");

	        String jsonInput = this.converttoJson(user);

	        Mockito.when(userService.saveUser(Mockito.any(Customer.class))).thenReturn(user);
	        MvcResult mvcResult = this.mockMvc.perform(MockMvcRequestBuilders.post(URI).accept(MediaType.APPLICATION_JSON).content(jsonInput).contentType(MediaType.APPLICATION_JSON))
	                .andReturn();
	        MockHttpServletResponse mockHttpServletResponse = mvcResult.getResponse();
	        String jsonOutput = mockHttpServletResponse.getContentAsString();
	        assertThat(jsonInput).isEqualTo(jsonOutput);
	        Assert.assertEquals(HttpStatus.OK.value(), mockHttpServletResponse.getStatus());
 }
 @Test
	public void testGetUserById() throws Exception {
		String URI= "/api/v2/finduserpolicy/{id}";
		Customer user = new Customer();
		user.setUserId(10178267);
	    user.setPolicyId(401273851);
	    user.setUserName("Suraj");
        user.setEmail("suraj7883@gmail.com");
        user.setMobileNo("7879101818");
        user.setAge(28);
        user.setDob("07-02-1993");
        
        String jsonInput = this.converttoJson(user);

       Mockito.when(userService.findUserById(Mockito.any())).thenReturn(user);
        //Assert.assertTrue(userpolicyService.findUserById());
        MvcResult mvcResult = this.mockMvc.perform(MockMvcRequestBuilders.get(URI, 10178267).accept(MediaType.APPLICATION_JSON)).andReturn();
        MockHttpServletResponse mockHttpServletResponse = mvcResult.getResponse();
        String jsonOutput = mockHttpServletResponse.getContentAsString();

        assertThat(jsonInput).isEqualTo(jsonOutput);
	}
 @Test
	public void testUpdateUser() throws Exception {
		String URI = "/api/v2/updateuser/{id}";
		Customer user = new Customer();
		user.setUserId(10178263);
	    user.setPolicyId(40127382);
	    user.setUserName("Hema");
        user.setEmail("hema26@gmail.com");
        user.setMobileNo("7845326170");
        user.setAge(27);
        user.setDob("16-07-1993");
        String jsonInput = this.converttoJson(user);

        Mockito.when(userService.updateUser(Mockito.any(),Mockito.any())).thenReturn(user);
        MvcResult mvcResult = this.mockMvc.perform(MockMvcRequestBuilders.put(URI,10178263).accept(MediaType.APPLICATION_JSON).content(jsonInput).contentType(MediaType.APPLICATION_JSON))
                .andReturn();
        MockHttpServletResponse mockHttpServletResponse = mvcResult.getResponse();
        String jsonOutput = mockHttpServletResponse.getContentAsString();

        assertThat(jsonInput).isEqualTo(jsonOutput);
	}
 @Test
	public void testDeleteUser() throws Exception {
		String URI = "/api/v2/deleteuser/{id}";
		Customer user = new Customer();
		user.setUserId(10178263);
	    user.setPolicyId(40127382);
	    user.setUserName("Hema");
        user.setEmail("hema26@gmail.com");
        user.setMobileNo("7845326170");
        user.setAge(27);
        user.setDob("16-07-1993");


        Mockito.when(userService.findUserById(Mockito.any())).thenReturn(user);
        Mockito.when(userService.deleteUserById(Mockito.any())).thenReturn(true);
        MvcResult mvcResult = this.mockMvc.perform(MockMvcRequestBuilders.delete(URI, 10178263).accept(MediaType.APPLICATION_JSON)).andReturn();
        MockHttpServletResponse mockHttpServletResponse = mvcResult.getResponse();

        Assert.assertNotEquals(HttpStatus.OK.value(), mockHttpServletResponse.getStatus());
	}
 @Test
	public void testGetAllUsers() throws Exception {
		String URI = "/api/v2/getAllusers";
		Customer user = new Customer();
		user.setUserId(10178263);
	    user.setPolicyId(40127382);
	    user.setUserName("Hema");
        user.setEmail("hema26@gmail.com");
        user.setMobileNo("7845326170");
        user.setAge(27);
        user.setDob("16-07-1993");
	        
	        Customer user1 = new Customer();
			 user1.setUserId(105);
			 user1.setUserId(10178263);
			    user1.setPolicyId(40127382);
			    user1.setUserName("Hema");
		        user1.setEmail("hema26@gmail.com");
		        user1.setMobileNo("7845326170");
		        user1.setAge(27);
		        user1.setDob("16-07-1993");
	    	 List<Customer> userPolicyList=new ArrayList<>();
	    	  userPolicyList.add(user);
	    	userPolicyList.add(user);
	    	 
	    	String jsonInput = this.converttoJson(userPolicyList);

	         Mockito.when(userService.getAllUsers()).thenReturn(userPolicyList);
	         MvcResult mvcResult = this.mockMvc.perform(MockMvcRequestBuilders.get(URI).accept(MediaType.APPLICATION_JSON)).andReturn();
	         MockHttpServletResponse mockHttpServletResponse = mvcResult.getResponse();
	         String jsonOutput = mockHttpServletResponse.getContentAsString();

	        assertThat(jsonInput).isEqualTo(jsonOutput);
	     }
	private String converttoJson(Object user) throws JsonProcessingException {
		ObjectMapper objectMapper = new ObjectMapper();
        return objectMapper.writeValueAsString(user);
	}
}
