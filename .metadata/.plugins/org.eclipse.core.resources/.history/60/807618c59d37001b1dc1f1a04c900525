package com.cg.terminsurancepayment.control;
import com.cg.terminsurancepayment.entity.Payment;
import com.cg.terminsurancepayment.service.PaymentService;
import com.fasterxml.jackson.core.JsonProcessingException;
import com.fasterxml.jackson.databind.ObjectMapper;
import org.junit.Assert;
import org.junit.jupiter.api.Test;
import org.junit.runner.RunWith;
import org.mockito.Mockito;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.boot.test.autoconfigure.web.servlet.WebMvcTest;
import org.springframework.boot.test.mock.mockito.MockBean;
import org.springframework.http.HttpStatus;
import org.springframework.http.MediaType;
import org.springframework.mock.web.MockHttpServletResponse;
import org.springframework.test.context.junit4.SpringRunner;
import org.springframework.test.web.servlet.MockMvc;
import org.springframework.test.web.servlet.MvcResult;
import org.springframework.test.web.servlet.request.MockMvcRequestBuilders;
import java.util.ArrayList;
import java.util.List;
import static org.assertj.core.api.Assertions.assertThat;

@RunWith(SpringRunner.class)
@WebMvcTest(value = PaymentController.class)
public class PaymentControllerTest {
	@Autowired
	private MockMvc mockMvc;
	@MockBean
	private PaymentService paymentService;

	@Test
	public void testCreatePayment() throws Exception {
		String URI = "/api/v2/savepayment";
		Payment payment = new Payment();
		payment.setPaymentId(102345);
		payment.setType("Debit");
		payment.setStatus("Success");
		payment.setCardName("Girija");
		payment.setCardNumber("6565 1234 5453 7771");
		payment.setCardExpiry("02/2022");
		payment.setCvv(123);

		String jsonInput = this.converttoJson(payment);

		Mockito.when(paymentService.savePayment(Mockito.any(Payment.class))).thenReturn(payment);
		MvcResult mvcResult = this.mockMvc.perform(MockMvcRequestBuilders.post(URI).accept(MediaType.APPLICATION_JSON)
				.content(jsonInput).contentType(MediaType.APPLICATION_JSON)).andReturn();
		MockHttpServletResponse mockHttpServletResponse = mvcResult.getResponse();
		String jsonOutput = mockHttpServletResponse.getContentAsString();
		assertThat(jsonInput).isEqualTo(jsonOutput);
		Assert.assertEquals(HttpStatus.OK.value(), mockHttpServletResponse.getStatus());
	}
	@Test
	public void testUpdatePayment() throws Exception {
		String URI = "/api/v2/updatepayment/{id}";
		Payment payment = new Payment();
		payment.setPaymentId(102345);
		payment.setType("Debit");
		payment.setStatus("Success");
		payment.setCardName("Girija");
		payment.setCardNumber("6565 1234 5453 7771");
		payment.setCardExpiry("02/2022");
		payment.setCvv(123);
		String jsonInput = this.converttoJson(payment);

		Mockito.when(paymentService.updatePayment(Mockito.any(), Mockito.any())).thenReturn(payment);
		MvcResult mvcResult = this.mockMvc.perform(MockMvcRequestBuilders.put(URI, 102345)
				.accept(MediaType.APPLICATION_JSON).content(jsonInput).contentType(MediaType.APPLICATION_JSON))
				.andReturn();
		MockHttpServletResponse mockHttpServletResponse = mvcResult.getResponse();
		String jsonOutput = mockHttpServletResponse.getContentAsString();

		assertThat(jsonInput).isEqualTo(jsonOutput);
	}
	@Test
	public void testGetPaymentById() throws Exception {
		String URI = "/api/v2/findpayment/{id}";
		Payment payment = new Payment();
		payment.setPaymentId(102221);
		payment.setType("Credit");
		payment.setStatus("Success");
		payment.setCardName("Aravind");
		payment.setCardNumber("9895 2114 9993 9321");
		payment.setCardExpiry("07/2027");
		payment.setCvv(943);

		String jsonInput = this.converttoJson(payment);

		Mockito.when(paymentService.getPaymentById(Mockito.any())).thenReturn(payment);
		// Assert.assertTrue(paymentService.findPaymentById());
		MvcResult mvcResult = this.mockMvc
				.perform(MockMvcRequestBuilders.get(URI, 10178267).accept(MediaType.APPLICATION_JSON)).andReturn();
		MockHttpServletResponse mockHttpServletResponse = mvcResult.getResponse();
		String jsonOutput = mockHttpServletResponse.getContentAsString();

		assertThat(jsonInput).isEqualTo(jsonOutput);
	}
	@Test
	public void testGetAllPayments() throws Exception {
		String URI = "/api/v2/getAllPayments";
		Payment payment = new Payment();
		payment.setPaymentId(102345);
		payment.setType("Debit");
		payment.setStatus("Success");
		payment.setCardName("Girija");
		payment.setCardNumber("6565 1234 5453 7771");
		payment.setCardExpiry("02/2022");
		payment.setCvv(123);

		Payment payment1 = new Payment();
		payment1.setPaymentId(102345);
		payment1.setType("Debit");
		payment1.setStatus("Success");
		payment1.setCardName("Girija");
		payment1.setCardNumber("6565 1234 5453 7771");
		payment1.setCardExpiry("02/2022");
		payment1.setCvv(123);
		List<Payment> paymentList = new ArrayList<>();
		paymentList.add(payment);
		paymentList.add(payment1);

		String jsonInput = this.converttoJson(paymentList);

		Mockito.when(paymentService.getAllPayments()).thenReturn(paymentList);
		MvcResult mvcResult = this.mockMvc.perform(MockMvcRequestBuilders.get(URI).accept(MediaType.APPLICATION_JSON))
				.andReturn();
		MockHttpServletResponse mockHttpServletResponse = mvcResult.getResponse();
		String jsonOutput = mockHttpServletResponse.getContentAsString();

		assertThat(jsonInput).isEqualTo(jsonOutput);
	}

	private String converttoJson(Object payment) throws JsonProcessingException {
		ObjectMapper objectMapper = new ObjectMapper();
		return objectMapper.writeValueAsString(payment);
	}
}
