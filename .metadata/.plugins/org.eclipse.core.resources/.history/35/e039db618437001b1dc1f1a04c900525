package com.cg.terminsurancepayment.control;
import java.util.List;

import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.http.HttpStatus;
import org.springframework.http.ResponseEntity;
import org.springframework.web.bind.annotation.GetMapping;
import org.springframework.web.bind.annotation.PathVariable;
import org.springframework.web.bind.annotation.PostMapping;
import org.springframework.web.bind.annotation.PutMapping;
import org.springframework.web.bind.annotation.RequestBody;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.ResponseStatus;
import org.springframework.web.bind.annotation.RestController;

import com.cg.terminsurancepayment.entity.Payment;
import com.cg.terminsurancepayment.exception.DuplicatePaymentException;
import com.cg.terminsurancepayment.exception.PaymentIdNotFoundException;
import com.cg.terminsurancepayment.paymentService.PaymentService;

@RestController
@RequestMapping("/payments")
public class PaymentController {
	@Autowired
	private PaymentService paymentService;
	
	/** This method adds the payment details 
	 * 
	 * @param Payment entity details
	 * 
	 * 
	 */
	
	
	@PostMapping("/addPayment")
	public ResponseEntity<String> addPayment(@RequestBody Payment payment) throws DuplicatePaymentException{
		Payment payment1 = paymentService.addPayment(payment);
		ResponseEntity<String> response;
		if(payment1 != null) {
			response = new ResponseEntity<String>("Payment with "+payment.getPaymentId()+" is added.",HttpStatus.CREATED);
		}
		else {
			response = new ResponseEntity<String>("Payment with "+payment.getPaymentId()+" is not added", HttpStatus.INTERNAL_SERVER_ERROR);
		}
		return response;
	}
	
	/** This method updates the payment details 
	 * 
	 * @param Payment entity details and Payment - paymentId
	 * 
	 * 
	 */
	
	
	@PutMapping("/updatePayment/{id}")
	public ResponseEntity<Payment> updatePayment(@PathVariable(value = "id") long id, @RequestBody Payment payment) {
		if(paymentService.updatePayment(id, payment) != null) {
			return new ResponseEntity<Payment>(payment, HttpStatus.ACCEPTED);
		}
		return new ResponseEntity<Payment>(HttpStatus.NOT_FOUND);
	}
	
	/** This method returns the payment details based on productId
	 * 
	 * @param Payment - paymentId 
	 * 
	 * 
	 */
	
	
	@GetMapping("/getPayment/{id}")
	public ResponseEntity<Payment> getPaymentDetails(@PathVariable(value = "id") long id) throws PaymentIdNotFoundException{
		Payment payment = paymentService.getPaymentDetails(id);
		if(payment == null) {
			return new ResponseEntity<Payment>(HttpStatus.NOT_FOUND);
		}
		return new ResponseEntity<Payment>(payment, HttpStatus.OK);
	}
	
	/** 
	 * 
	 *This method returns the list of payment details  
	 * 
	 * 
	 */
	
	
	@ResponseStatus(value = HttpStatus.OK)
	@GetMapping("/getAllPayments")
	public List<Payment> getAllPaymentDetails(){
		return paymentService.getAllPaymentDetails();
	}
}
