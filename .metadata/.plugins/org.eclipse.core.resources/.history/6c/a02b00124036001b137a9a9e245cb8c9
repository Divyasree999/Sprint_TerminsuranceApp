package com.cg.terminsurancecustomer.service;

import java.util.ArrayList;
import java.util.List;
import org.springframework.boot.test.mock.mockito.MockBean;
import org.junit.runner.RunWith;
import org.junit.jupiter.api.Test;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.boot.test.context.SpringBootTest;
import org.springframework.test.context.junit4.SpringRunner;

import com.cg.terminsurancecustomer.entity.Customer;
import com.cg.terminsurancecustomer.repository.CustomerDaoImpl;


import static org.assertj.core.api.Assertions.assertThat;

import org.mockito.Mockito;

@RunWith(SpringRunner.class)
@SpringBootTest
class CustomerServiceTest {
	@MockBean
	 private CustomerDaoImpl customerDaoImpl;
	
	 @Autowired
	 private CustomerService customerService;
	
	 @Test
	 public void testGetCustomerById() throws Exception{
		 Customer customer=new Customer();
		 customer.setCustomerId(10178263);
		    customer.setPolicyId(40127382);
		    customer.setCustomerName("Hema");
	        customer.setEmail("hema26@gmail.com");
	        customer.setMobileNo("7845326170");
	        customer.setAge(27);
	        customer.setDob("16-07-1993");


	      Mockito.when(customerDaoImpl.findByCustomerId(10178278)).thenReturn(customer);
	    		  //findCustomerById()).get()).thenReturn(customer);
	        		//Mockito.when(customerDaoImpl.findById(customer.getCustomerId()).get()).thenReturn(customer);
		        assertThat(customerService.findCustomerById(10178278)).isEqualTo(customer);
		    }


	@Test
	void testDeleteCustomer() throws Exception {
		 Customer customer=new Customer();
		 customer.setCustomerId(10178274);
		    customer.setPolicyId(401273827);
		    customer.setCustomerName("Sanya");
	        customer.setEmail("sanya123@gmail.com");
	        customer.setMobileNo("7893436347");
	        customer.setAge(25);
	        customer.setDob("13-08-1996");
		customerDaoImpl.deleteById(customer.getCustomerId());
       System.out.println(customerDaoImpl.findById(10178274));
       assertThat(customerDaoImpl.findById(10178274).isEmpty());
	}

	@Test
	void testUpdateCustomerById() throws Exception {
		 Customer customer=new Customer();
		 customer.setCustomerId(10178263);
		    customer.setPolicyId(40127382);
		    customer.setCustomerName("Hema");
	        customer.setEmail("hema26@gmail.com");
	        customer.setMobileNo("7845326170");
	        customer.setAge(27);
	        customer.setDob("16-07-1993");

		        Mockito.when(customerDaoImpl.findByCustomerId(10178278)).thenReturn(customer);
		        customer.setMobileNo("6543874051");
		        Mockito.when(customerDaoImpl.save(customer)).thenReturn(customer);
		        System.out.println(customer.getMobileNo());
		       // assertThat(customerPolicyService.updateCustomer(10178263, customer)).isEqualTo(customer);
	}

	@Test
	void testGetAllCustomerPolicies() {
		 Customer customer=new Customer();
		 customer.setCustomerId(10178263);
		    customer.setPolicyId(40127382);
		    customer.setCustomerName("Hema");
	        customer.setEmail("hema26@gmail.com");
	        customer.setMobileNo("7845326170");
	        customer.setAge(27);
	        customer.setDob("16-07-1993");


	        Customer customer1=new Customer();
	        customer.setCustomerId(10178254);
	        customer.setPolicyId(40127672);
		    customer.setCustomerName("Manyatha");
	        customer.setEmail("manyatha453@gmail.com");
	        customer.setMobileNo("7487589312");
	        customer.setAge(24);
	        customer.setDob("12-09-1997");

       List<Customer> customerList = new ArrayList<>();
       customerList.add(customer);
       customerList.add(customer1);

       Mockito.when(customerDaoImpl.findAll()).thenReturn(customerList);
       assertThat(customerService.getAllCustomers()).isEqualTo(customerList);
	}

	@Test
	void testSaveCustomer() {
		Customer customer=new Customer();
		customer.setCustomerId(10878781);
	    customer.setPolicyId(40255512);
	    customer.setCustomerName("Sharad Malhotra");
        customer.setEmail("malhotrasharad21@gmail.com");
        customer.setMobileNo("8989891212");
        customer.setAge(25);
        customer.setDob("21-12-1995");
		
	}
}
