package com.cg.terminsurancepayment.service;
/** The IPaymentServiceImplTest class provides testing of IPaymentServiceImpl layer
 *   
 * @author Jayasree's
 * 
 */
import static org.junit.jupiter.api.Assertions.assertEquals;
import static org.mockito.Mockito.when;

import java.time.LocalDate;
import java.util.ArrayList;
import java.util.List;
import java.util.Optional;

import org.junit.jupiter.api.Test;
import org.mockito.Mockito;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.boot.test.context.SpringBootTest;
import org.springframework.boot.test.mock.mockito.MockBean;

import com.cg.terminsurancepayment.entity.Card;
import com.cg.terminsurancepayment.entity.Payment;
import com.cg.terminsurancepayment.repository.PaymentDaoImpl;

@SpringBootTest
class PaymentServiceTest {

	@Autowired
	private PaymentService service;
	
	@MockBean
	private PaymentDaoImpl paymentDao;	
	
	/*
	 * 
	 * This method tests whether the payment details are added or not
	 * 
	 */
	@Test
	void testAddPaymentShouldAddPaymentToDatabase() throws Exception {
		Card card = new Card(201, "Suji", "3739 3450 2989", LocalDate.of(2025, 9, 8), 123);
		Payment paymentToAdd = new Payment(101, "Debit", "success", card);
		when(paymentDao.save(paymentToAdd)).thenReturn(paymentToAdd);
		assertEquals(paymentToAdd, service.addPayment(paymentToAdd)); 
	}	

	/*
	 * 
	 * This method tests whether the payment details are updated or not
	 * 
	 */
	
	@Test
	void testUpdatePaymentShouldUpdatePaymentByIds() {
		Payment paymentToUpdate = new Payment();
		paymentToUpdate.setPaymentId(104L); 
		when(paymentDao.existsById(104L)).thenReturn(true);
		when(paymentDao.findById(104L)).thenReturn(Optional.of(paymentToUpdate));
		when(paymentDao.save(paymentToUpdate)).thenReturn(paymentToUpdate);
		Payment payment = service.updatePayment(104L, paymentToUpdate);
		assertEquals(payment, paymentToUpdate);
	}
	/*
	 * 
	 * This method is used to get the payment details based on paymentId
	 * 
	 */
	
	@Test
	void testGetPaymentDetailsBasedOnId() {
		Card card3 = new Card(204, "Suji", "4739 5470 2989", LocalDate.of(2023, 7, 15), 147);
		Payment payment = new Payment(103, "Debit", "success", card3);
		long paymentId = payment.getPaymentId();
		Optional<Payment> getPayment = Optional.of(payment);
		Mockito.when(paymentDao.findById(paymentId)).thenReturn(getPayment);
		Payment payment1 = service.getPaymentDetails(paymentId);
		Optional<Payment> payment2 = Optional.of(payment1);
		assertEquals(payment2, getPayment);
	    	
	}

	/*
	 * 
	 * This method is used to get all the payment details 
	 * 
	 */
	
	@Test
	void testGetAllPaymentDetailsShouldGiveAllPayments() {
		Card card4 = new Card(204, "Suji", "4739 5470 2989", LocalDate.of(2023, 7, 15), 147);
		Payment payment1 = new Payment(103, "Debit", "success", card4);
		Payment payment2 = new Payment(103, "Debit", "success", card4);
		List<Payment> payments = new ArrayList<Payment>();
		payments.add(payment1);
		payments.add(payment2);
		Mockito.when(paymentDao.findAll()).thenReturn(payments);
		assertEquals(service.getAllPaymentDetails(), payments);
	}
}
