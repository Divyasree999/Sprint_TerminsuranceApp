package com.cg.terminsurancepayment.service;
import static org.assertj.core.api.Assertions.assertThat;
/** The IPaymentServiceImplTest class provides testing of IPaymentServiceImpl layer
 *   
 * @author Divyasree
 * 
 */
import static org.junit.jupiter.api.Assertions.assertEquals;
import static org.mockito.Mockito.when;
import java.util.ArrayList;
import java.util.List;
import java.util.Optional;
import org.junit.jupiter.api.Test;
import org.mockito.Mockito;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.boot.test.context.SpringBootTest;
import org.springframework.boot.test.mock.mockito.MockBean;
import com.cg.terminsurancepayment.entity.Payment;
import com.cg.terminsurancepayment.repository.PaymentDaoImpl;

@SpringBootTest
class PaymentServiceTest {

	@Autowired
	private PaymentService paymentService;
	
	@MockBean
	private PaymentDaoImpl paymentDaoImpl;	
	@Test
	void testSavePayment() {
		Payment payment = new Payment();
		payment.setPaymentId(102345);
		payment.setType("Debit");
		payment.setStatus("Success");
		payment.setCardName("Girija");
		payment.setCardNumber("6565 1234 5453 7771");
		payment.setCardExpiry("02/2022");
		payment.setCvv(123);
	}
	@Test
	void testUpdatePaymentById() throws Exception {
		Payment payment = new Payment();
		payment.setPaymentId(102345);
		payment.setType("Debit");
		payment.setStatus("Success");
		payment.setCardName("Girija");
		payment.setCardNumber("6565 1234 5453 7771");
		payment.setCardExpiry("02/2022");
		payment.setCvv(123);

		Mockito.when(paymentDaoImpl.findByPaymentId(102345)).thenReturn(payment);
		payment.setStatus("Failed");
		Mockito.when(paymentDaoImpl.save(payment)).thenReturn(payment);
		System.out.println(payment.getStatus());
		// assertThat(paymentService.updatePayment(102345,
		// payment)).isEqualTo(payment);
	}
	@Test
	public void testFindpaymentById() throws Exception {
		Payment payment = new Payment();
		payment.setPaymentId(102345);
		payment.setType("Debit");
		payment.setStatus("Success");
		payment.setCardName("Girija");
		payment.setCardNumber("6565 1234 5453 7771");
		payment.setCardExpiry("02/2022");
		payment.setCvv(123);

		Mockito.when(paymentDaoImpl.findByPaymentId(10178278)).thenReturn(payment);
		// findPaymentById()).get()).thenReturn(payment);
		// Mockito.when(paymentDaoImpl.findById(payment.getPaymentId()).get()).thenReturn(payment);
		assertThat(paymentService.findPaymentById(10178278)).isEqualTo(payment);
	}
	@Test
	void testGetAllCustomerPolicies() {
		Customer customer = new Customer();
		customer.setCustomerId(10178263);
		customer.setPolicyId(40127382);
		customer.setCustomerName("Hema");
		customer.setEmail("hema26@gmail.com");
		customer.setMobileNo("7845326170");
		customer.setAge(27);
		customer.setDob("16-07-1993");

		Customer customer1 = new Customer();
		customer.setCustomerId(10178254);
		customer.setPolicyId(40127672);
		customer.setCustomerName("Manyatha");
		customer.setEmail("manyatha453@gmail.com");
		customer.setMobileNo("7487589312");
		customer.setAge(24);
		customer.setDob("12-09-1997");

		List<Customer> customerList = new ArrayList<>();
		customerList.add(customer);
		customerList.add(customer1);

		Mockito.when(customerDaoImpl.findAll()).thenReturn(customerList);
		assertThat(customerService.getAllCustomers()).isEqualTo(customerList);
	}

}
